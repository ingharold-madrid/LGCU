// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// estimate_alpha_beta_cpp
List estimate_alpha_beta_cpp(NumericVector X, bool known_alpha, double alpha);
RcppExport SEXP _LGCU_estimate_alpha_beta_cpp(SEXP XSEXP, SEXP known_alphaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type known_alpha(known_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_alpha_beta_cpp(X, known_alpha, alpha));
    return rcpp_result_gen;
END_RCPP
}
// monte_carlo_loop_cpp
List monte_carlo_loop_cpp(double alpha, double beta, double alpha0_est, double beta0_est, double beta1, int n_I, bool known_alpha, double H_delta, double H_plus, double k_plus, double K_l, int delay, int tau, int max_iter);
RcppExport SEXP _LGCU_monte_carlo_loop_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP alpha0_estSEXP, SEXP beta0_estSEXP, SEXP beta1SEXP, SEXP n_ISEXP, SEXP known_alphaSEXP, SEXP H_deltaSEXP, SEXP H_plusSEXP, SEXP k_plusSEXP, SEXP K_lSEXP, SEXP delaySEXP, SEXP tauSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha0_est(alpha0_estSEXP);
    Rcpp::traits::input_parameter< double >::type beta0_est(beta0_estSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< int >::type n_I(n_ISEXP);
    Rcpp::traits::input_parameter< bool >::type known_alpha(known_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type H_delta(H_deltaSEXP);
    Rcpp::traits::input_parameter< double >::type H_plus(H_plusSEXP);
    Rcpp::traits::input_parameter< double >::type k_plus(k_plusSEXP);
    Rcpp::traits::input_parameter< double >::type K_l(K_lSEXP);
    Rcpp::traits::input_parameter< int >::type delay(delaySEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(monte_carlo_loop_cpp(alpha, beta, alpha0_est, beta0_est, beta1, n_I, known_alpha, H_delta, H_plus, k_plus, K_l, delay, tau, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// monte_carlo_loop_down_cpp
List monte_carlo_loop_down_cpp(double alpha, double beta, double alpha0_est, double beta0_est, double beta1, int n_I, bool known_alpha, double H_delta, double H_minus, double k_minus, double K_l, int delay, int tau, int max_iter);
RcppExport SEXP _LGCU_monte_carlo_loop_down_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP alpha0_estSEXP, SEXP beta0_estSEXP, SEXP beta1SEXP, SEXP n_ISEXP, SEXP known_alphaSEXP, SEXP H_deltaSEXP, SEXP H_minusSEXP, SEXP k_minusSEXP, SEXP K_lSEXP, SEXP delaySEXP, SEXP tauSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha0_est(alpha0_estSEXP);
    Rcpp::traits::input_parameter< double >::type beta0_est(beta0_estSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< int >::type n_I(n_ISEXP);
    Rcpp::traits::input_parameter< bool >::type known_alpha(known_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type H_delta(H_deltaSEXP);
    Rcpp::traits::input_parameter< double >::type H_minus(H_minusSEXP);
    Rcpp::traits::input_parameter< double >::type k_minus(k_minusSEXP);
    Rcpp::traits::input_parameter< double >::type K_l(K_lSEXP);
    Rcpp::traits::input_parameter< int >::type delay(delaySEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(monte_carlo_loop_down_cpp(alpha, beta, alpha0_est, beta0_est, beta1, n_I, known_alpha, H_delta, H_minus, k_minus, K_l, delay, tau, max_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LGCU_estimate_alpha_beta_cpp", (DL_FUNC) &_LGCU_estimate_alpha_beta_cpp, 3},
    {"_LGCU_monte_carlo_loop_cpp", (DL_FUNC) &_LGCU_monte_carlo_loop_cpp, 14},
    {"_LGCU_monte_carlo_loop_down_cpp", (DL_FUNC) &_LGCU_monte_carlo_loop_down_cpp, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_LGCU(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
